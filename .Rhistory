if (tax.clean[i,2] == ""){
kingdom <- paste("Kingdom_", tax.clean[i,1], sep = "")
tax.clean[i, 2:7] <- kingdom
} else if (tax.clean[i,3] == ""){
phylum <- paste("Phylum_", tax.clean[i,2], sep = "")
tax.clean[i, 3:7] <- phylum
} else if (tax.clean[i,4] == ""){
class <- paste("Class_", tax.clean[i,3], sep = "")
tax.clean[i, 4:7] <- class
} else if (tax.clean[i,5] == ""){
order <- paste("Order_", tax.clean[i,4], sep = "")
tax.clean[i, 5:7] <- order
} else if (tax.clean[i,6] == ""){
family <- paste("Family_", tax.clean[i,5], sep = "")
tax.clean[i, 6:7] <- family
} else if (tax.clean[i,7] == ""){
tax.clean$Species[i] <- paste("Genus",tax.clean$Genus[i], sep = "_")
}
}
head(tax.clean)
taxonomy2<-as.matrix(tax.clean)
# add taxonomy to ps
tax_table(ps)<-taxonomy2
head(tax.clean)
taxonomy2<-as.matrix(tax.clean)
# add taxonomy to ps
tax_table(ps)<-taxonomy2
#merge taxa on the class level, so that there's only 1 value for each Class CHANGE HERE IF YOU WANT A DIFFERENT TAXONOMIC LEVEL
physeq.f.glom <- tax_glom(ps, "Class",NArm=FALSE)
#transform data from raw abundance to relative abundance
physeq.f.ra.glom <- transform_sample_counts(physeq.f.glom, function(x) x*100/sum(x))
#make otu table a dataframe
propData <- as.data.frame((otu_table(physeq.f.ra.glom)))
head(propData)
#set up your dataframe that will be used to make the relative abundance plot
plotDF1 <- propData %>% #within the propData variable
rownames_to_column(var="taxa") %>% #set the rownames (sample IDS) to a column
melt() %>% #takes the data from wide to long format
magrittr::set_names(c("sample", "taxa", "relab")) #rename columns
head(plotDF1)#inspect to make sure it worked
#extract the taxonomy info into something that can be combined with the plot dataframe
taxonomy.2 <- tax_table(physeq.f) %>%
as.data.frame() %>%
rownames_to_column(var="taxa") #add the rownames to a column called taxa
#merge taxa on the class level, so that there's only 1 value for each Class CHANGE HERE IF YOU WANT A DIFFERENT TAXONOMIC LEVEL
physeq.f.glom <- tax_glom(ps, "Class",NArm=FALSE)
#transform data from raw abundance to relative abundance
physeq.f.ra.glom <- transform_sample_counts(physeq.f.glom, function(x) x*100/sum(x))
#make otu table a dataframe
propData <- as.data.frame((otu_table(physeq.f.ra.glom)))
head(propData)
#set up your dataframe that will be used to make the relative abundance plot
plotDF1 <- propData %>% #within the propData variable
rownames_to_column(var="taxa") %>% #set the rownames (sample IDS) to a column
melt() %>% #takes the data from wide to long format
magrittr::set_names(c("sample", "taxa", "relab")) #rename columns
head(plotDF1)#inspect to make sure it worked
#extract the taxonomy info into something that can be combined with the plot dataframe
taxonomy.2 <- tax_table(physeq.f.ra.glom) %>%
as.data.frame() %>%
rownames_to_column(var="taxa") #add the rownames to a column called taxa
head(taxonomy.2)#just checking it worked
#combine dataframes merging by taxa, with the columns listed in select. ALSO CHANGE CLASS HERE IF YOU WANT A DIFFERENT TAXONOMIC RANK
plotDF1 <- left_join(plotDF1, taxonomy.2, by="taxa") %>% select(taxa, sample, relab, Class)
head(plotDF1)#just checking it worked
sampdata<-data.frame(sample_data(physeq.f)) #make dataframe of the sample data
sampdata<-data.frame(sample_data(physeq.f.ra.glom)) #make dataframe of the sample data
metadata.2 <- sampdata %>%
rownames_to_column(var="sample") #make a column of rownames (sample)
head(metadata.2)
head(metadata.2)
#combine plotDF1 and metadata.2 by sample name
plotDF1 <- left_join(plotDF1, metadata.2, by="sample")
head(plotDF1) #just checking it worked
#check class of things that should be factors.
plotDF1$sample<-factor(plotDF1$sample)
plotDF1$Site<-factor(plotDF1$Region)
#ASVs were first glommed and then counts were transformed into relative abundaces. ITS2 types that made up less than 5% of a sample's relative abundance were grouped into a <5% category to simplify the visualization in Figure 7.
#get rid of those <5%
plotDF1[plotDF1$relab <1, ]$Class<-"<1% abundance"
head(plotDF1)
plotDF1$Class<-factor(plotDF1$Class)
#check how many classes there are to determine how many colors you need
length(levels(factor(plotDF1$Class)))
#make a list of colors the same length as the number of classes
mycolors <- c("grey","red","orange","yellow","green","blue","magenta","darkorchid4")
#set the colors to an associated taxonomic rank. ALSO CHANGE CLASS HERE IF YOU WANT A DIFFERENT TAXONOMIC RANK
names(mycolors)<-levels(factor(plotDF1$Class))
mycolors #confirm it worked
#make a plot with genotype/sample name on the x-axis, relative abundance on the y-axis, and color filled by Class. ALSO CHANGE CLASS HERE IF YOU WANT A DIFFERENT TAXONOMIC RANK
ggplot(plotDF1, aes(x=plotDF1$sample, relab, fill=Class)) +
#make it a barplot with classes stacked on top of each other
geom_bar(stat="identity", position = "stack") +
#set x-axis labels to be oriented vertically, and set the size of the text to 10
theme(axis.text.x = element_text(angle = 90,size = 6.5)) +
#set the colors being filled in by class to the mycolors variable made earlier
scale_fill_manual(values = mycolors,limits = levels(plotDF1$Class)) +
#facet wrap (separate out) by Region
facet_grid(~Region,space="free_x",scales="free_x",drop=TRUE) +
#set legend title size to 8 and legend text size to 6
theme(legend.title = element_text(size = 8),legend.text = element_text(size = 6),legend.position = "bottom")+
xlab("")+
ylab("% Relative Abundance")
#switch to relative abundance from raw abundance
physeq.f.ra <- transform_sample_counts(ps, function(x) x*100/sum(x))
#merge by region
p<-merge_samples(physeq.f.ra,"Region")
o<-otu_table(p) #make variable of p's otu table
rowSums(otu_table(physeq.f.ra)) #confirm that all of the rows add up to 100 (this makes sure that the data is actually in relative abundance format)
propData <- as.data.frame(o) #make otu table a dataframe
t<-data.frame(cbind(levels(as.factor(sample_data(ps)$Region)))) #make dataframe with region
t <-cbind(t,propData$ASV_2,propData$ASV_3,propData$ASV_4) #add the abundance data of the 3 ASVs from the simper to the dataframe
colnames(t)<-c("Region","ASV_2","ASV_3","ASV_4") #set the column names
pcm <- melt(t, id = c("Region")) #convert data frame from a "wide" format to a "long" format
#make plot with Region as the x-axis, the significant ASVs as the y-axis, and color filled by the significant ASVs
ggplot(pcm, aes(x = Region, y = variable,fill=variable)) +
#make bubble plot format where the size of the bubble is the relative abundance
geom_point(aes(size = as.numeric(value)), alpha = 0.75, shape = 21) +
#set bubble size scaling
scale_size_continuous(limits = c(0.000001, 100), range = c(.5,10), breaks = c(1,25,50,75)) +
#set labels for size legend and color legend
labs( x= "", y = "", size = "Abundance", fill = "Significant ASVs")  +
#set various text sizes and colors, as well as legend position
theme(legend.key=element_blank(), axis.text.x = element_text(colour = "black", size = 12, face = "bold", angle = 90, vjust = 0.3, hjust = 1), axis.text.y = element_text(colour = "black", face = "bold", size = 11), legend.text = element_text(size = 10, face ="bold", colour ="black"), legend.title = element_text(size = 12, face = "bold"), panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1.2), legend.position = "right") +
#set y-scale limits to significant ASVs
scale_y_discrete(limits = rev(levels(pcm$variable)))
taxdf<-data.frame(tax_table(physeq.f.ra))
asvnames<-taxdf[rownames(taxdf) %in% c("ASV_2","ASV_3","ASV_4"), ]$Species
ggplot(pcm, aes(x = Region, y = variable,fill=variable)) +
#make bubble plot format where the size of the bubble is the relative abundance
geom_point(aes(size = as.numeric(value)), alpha = 0.75, shape = 21) +
#set bubble size scaling
scale_size_continuous(limits = c(0.000001, 100), range = c(.5,10), breaks = c(1,25,50,75)) +
#set labels for size legend and color legend
labs( x= "", y = "", size = "Abundance", fill = "Significant ASVs")  +
#set various text sizes and colors, as well as legend position
theme(legend.key=element_blank(), axis.text.x = element_text(colour = "black", size = 12, face = "bold", angle = 90, vjust = 0.3, hjust = 1), axis.text.y = element_text(colour = "black", face = "bold", size = 11), legend.text = element_text(size = 10, face ="bold", colour ="black"), legend.title = element_text(size = 12, face = "bold"), panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1.2), legend.position = "right") +
#set y-scale limits to significant ASVs
scale_y_discrete(limits = rev(levels(pcm$variable)),labels=asvnames) #add labels here
#make plot with Region as the x-axis, the significant ASVs as the y-axis, and color filled by the significant ASVs
ggplot(pcm, aes(x = Region, y = variable,fill=variable)) +
#make bubble plot format where the size of the bubble is the relative abundance
geom_point(aes(size = as.numeric(value)), alpha = 0.75, shape = 21) +
#set bubble size scaling
scale_size_continuous(limits = c(0.000001, 100), range = c(.5,10), breaks = c(1,25,50,75)) +
#set labels for size legend and color legend
labs( x= "", y = "", size = "Abundance", fill = "Significant ASVs")  +
#set various text sizes and colors, as well as legend position
theme(legend.key=element_blank(), axis.text.x = element_text(colour = "black", size = 12, face = "bold", angle = 90, vjust = 0.3, hjust = 1), axis.text.y = element_text(colour = "black", face = "bold", size = 11), legend.text = element_text(size = 10, face ="bold", colour ="black"), legend.title = element_text(size = 12, face = "bold"), panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1.2), legend.position = "right") +
#set y-scale limits to significant ASVs
scale_y_discrete(limits = rev(levels(pcm$variable)))
taxdf<-data.frame(tax_table(physeq.f.ra))
asvnames<-taxdf[rownames(taxdf) %in% c("ASV_2","ASV_3","ASV_4"), ]$Species
ggplot(pcm, aes(x = Region, y = variable,fill=variable)) +
#make bubble plot format where the size of the bubble is the relative abundance
geom_point(aes(size = as.numeric(value)), alpha = 0.75, shape = 21) +
#set bubble size scaling
scale_size_continuous(limits = c(0.000001, 100), range = c(.5,10), breaks = c(1,25,50,75)) +
#set labels for size legend and color legend
labs( x= "", y = "", size = "Abundance", fill = "Significant ASVs")  +
#set various text sizes and colors, as well as legend position
theme(legend.key=element_blank(), axis.text.x = element_text(colour = "black", size = 12, face = "bold", angle = 90, vjust = 0.3, hjust = 1), axis.text.y = element_text(colour = "black", face = "bold", size = 11), legend.text = element_text(size = 10, face ="bold", colour ="black"), legend.title = element_text(size = 12, face = "bold"), panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1.2), legend.position = "right") +
#set y-scale limits to significant ASVs
scale_y_discrete(limits = rev(levels(pcm$variable)),labels=asvnames) #add labels here
library("ggplot2") #for plotting
library("multcompView") #for Tukey post-hoc test
library("patchwork") #for plotting
library("phyloseq") #for microbial data
library("tidyverse") #for data filtering
library("vegan") #for stats
ps <- readRDS("examplePhyloseq.rds") #import the .rds phyloseq object made in the intro to phyloseq notebook
ps #confirm it worked
#get data into correct format for calculation
asvtab<-as.matrix((data.frame(otu_table(ps))))#convert otu table to matrix
samdf<-data.frame(sample_data(ps))#convert sample data to a dataframe
#richness
rich <- specnumber(asvtab)
length(rich)#check the length, should be the same as the number of samples
#Shannon diversity
shan.div <- vegan::diversity(asvtab,"shannon")
#Inverse Simpson
inv.simp <- vegan::diversity(asvtab, "inv")
#combine them all into one dataframe with the sample data
alp <- cbind(rich, shan.div, inv.simp,samdf)
alp <- rownames_to_column(alp, var = "id") #add the rownames as a column
alphamets <- data.frame(alp)#back to dataframe from matrix
alphamets
#use the function wrapper from the AlphaDiv_wrapperfuncs.R script to save yourself some time (and lines of code)
source("AlphaDiv_wrapperfuncs.R")
alpha_coral<-myalphamets(ps) #run the function on the full dataset and save the output
alpha_coral #check it worked
#If you just want the mean and the standard error of one metric at a time:
aggregate(rich1~Region,FUN=mean,data=alpha_coral) #mean
aggregate(rich1~Region,FUN=function(x) sd(x)/sqrt(length(x)),data=alpha_coral) #se
#now use the wrapper function to get everything at once
alpha.summary(ps,sample_data(ps)$Region) #must put in phyloseq object and then the sampledata variable that you are interested in
####### richness: ##########
#the anova model
mod<-aov((rich1)~Region,data=alpha_coral)
#test for normality using shapiro-wilks
shapiro.test(mod$residuals) #if p<0.05, then the data is not NORMAL
#it wasn't normal
mod<-aov(log(rich1)~Region,data=alpha_coral) #try a log transformation
shapiro.test(mod$residuals) #now we're normal.
#get anova results
summary(mod) #region is significantly different
#do the multiple comparison tests (tukey)
tuk.rich<-TukeyHSD(mod)
tuk.rich #the lower keys are sig different from middle and upper
rich.letters<-multcompLetters(tuk.rich$Region[, "p adj"])$Letters #save letters for plotting
###### shannon: #######
mod<-aov((shannon1)~Region,data=alpha_coral)
shapiro.test(mod$residuals) #normal
summary(mod) #region is significant
tuk.shan<-TukeyHSD(mod)
tuk.shan #upper sig dif from lower
shan.letters<-multcompLetters(tuk.shan$Region[, "p adj"])$Letters
####### inverse simpson: #######
mod<-aov((invsimp1)~Region,data=alpha_coral)
shapiro.test(mod$residuals) #Not normal
mod<-aov(log(invsimp1)~Region,data=alpha_coral) #try with log transform
shapiro.test(mod$residuals) #Now we're good
summary(mod) #region is sig dif
tuk.simp<-TukeyHSD(mod)
tuk.simp #lower sig dif from middle and upper
simp.letters<-multcompLetters(tuk.simp$Region[, "p adj"])$Letters
#make a box plot with region on the x-axis, and species richness on the y-axis, saved in a variable so that it can be saved later or used with patchwork
ric <- alpha_coral %>% ggplot(aes(Region,rich1)) +
geom_boxplot() +
xlab("") +
theme(text = element_text(size=12))+
ylab("Species Richness") +
#ggtitle("Richness") +
theme(axis.text.x = element_text(angle = 90))+
annotate(geom="text",x=c(1,2,3),y=c(70,70,70),label=rich.letters[order(names(rich.letters))],color="red")
#you will need to adjust the annotate line individually, as I took the easy way out when coding this instead of making it work with anything
ric #print the plot
#make a box plot with region on the x-axis, and shannon diversity on the y-axis, saved in a variable so that it can be saved later with ggsave
shandiv <- alpha_coral %>% ggplot(aes(Region,shannon1)) +
geom_boxplot() +
#ggtitle("Shannon Diversity") +
xlab("")+
ylab("Shannon Diversity") +
theme(text = element_text(size=12)) +
theme(axis.text.x = element_text(angle = 90))+
annotate(geom="text",x=c(1,2,3),y=c(0.75,0.75,0.75),label=shan.letters[order(names(shan.letters))],color="red")
shandiv #print the plot
#make a box plot with region on the x-axis, and species richness on the y-axis, saved in a variable so that it can be saved later with ggsave
invsimp <- alpha_coral %>% ggplot(aes(Region, invsimp1)) +
geom_boxplot() +
ylab("Inverse Simpson Diversity") +
xlab("") +
theme(text = element_text(size=12)) +
theme(axis.text.x = element_text(angle = 90))+
annotate(geom="text",x=c(1,2,3),y=c(1.7,1.7,1.7),label=simp.letters[order(names(simp.letters))],color="red")
invsimp #print the plot
ric + shandiv + invsimp
alpha_coral$Region<-as.factor(alpha_coral$Region) #make sure region is a factor
kruskal.test(rich1~Region,data=alpha_coral) #run a kruskal wallis test of richness by region
#set it up just like we set up the multiple permanova test
sampledf<-data.frame(sample_data(ps))
sampledf$Region<-as.factor(sampledf$Region)
region.list<-levels(sampledf$Region)
region.list
pvals<-c()
locations<-c()
for (i in 1:length(region.list)){
region.leftout<-region.list[i]
alph_sub<-subset(alpha_coral,Region!=region.leftout) #subset the alpha metrics to just two locations
kwt<-kruskal.test(rich1~Region,alph_sub) #kruskal wallis test
print(kwt)
pvals<-c(pvals,kwt$'p.value') #save the pval
locations<-rbind(locations,c(region.list[-i]))#save the locations tested
}
combinedtest<-cbind(locations,pvals)
mult_kwt<-data.frame(combinedtest)
mult_kwt$pvaladj<-p.adjust(mult_kwt$pvals,method="bonferroni")
mult_kwt
library("ggplot2") #for plotting
library("multcompView") #for Tukey post-hoc test
library("patchwork") #for plotting
library("phyloseq") #for microbial data
library("tidyverse") #for data filtering
library("vegan") #for stats
ps <- readRDS("examplePhyloseq.rds") #import the .rds phyloseq object made in the intro to phyloseq notebook
ps #confirm it worked
#get data into correct format for calculation
asvtab<-as.matrix((data.frame(otu_table(ps))))#convert otu table to matrix
samdf<-data.frame(sample_data(ps))#convert sample data to a dataframe
#richness
rich <- specnumber(asvtab)
length(rich)#check the length, should be the same as the number of samples
#Shannon diversity
shan.div <- vegan::diversity(asvtab,"shannon")
#Inverse Simpson
inv.simp <- vegan::diversity(asvtab, "inv")
#combine them all into one dataframe with the sample data
alp <- cbind(rich, shan.div, inv.simp,samdf)
alp <- rownames_to_column(alp, var = "id") #add the rownames as a column
alphamets <- data.frame(alp)#back to dataframe from matrix
alphamets
#use the function wrapper from the AlphaDiv_wrapperfuncs.R script to save yourself some time (and lines of code)
source("AlphaDiv_wrapperfuncs.R")
alpha_coral<-myalphamets(ps) #run the function on the full dataset and save the output
alpha_coral #check it worked
#If you just want the mean and the standard error of one metric at a time:
aggregate(rich1~Region,FUN=mean,data=alpha_coral) #mean
aggregate(rich1~Region,FUN=function(x) sd(x)/sqrt(length(x)),data=alpha_coral) #se
#now use the wrapper function to get everything at once
alpha.summary(ps,sample_data(ps)$Region) #must put in phyloseq object and then the sampledata variable that you are interested in
#the anova model
mod<-aov((rich1)~Region,data=alpha_coral)
#test for normality using shapiro-wilks
shapiro.test(mod$residuals) #if p<0.05, then the data is not NORMAL
#it wasn't normal
mod<-aov(log(rich1)~Region,data=alpha_coral) #try a log transformation
shapiro.test(mod$residuals) #now we're normal.
#get anova results
summary(mod) #region is significantly different
#do the multiple comparison tests (tukey)
tuk.rich<-TukeyHSD(mod)
tuk.rich #the lower keys are sig different from middle and upper
rich.letters<-multcompLetters(tuk.rich$Region[, "p adj"])$Letters #save letters for plotting
ric <- alpha_coral %>% ggplot(aes(Region,rich1)) +
geom_boxplot() +
xlab("") +
theme(text = element_text(size=12))+
ylab("Species Richness") +
#ggtitle("Richness") +
theme(axis.text.x = element_text(angle = 90))+
annotate(geom="text",x=c(1,2,3),y=c(70,70,70),label=rich.letters[order(names(rich.letters))],color="red")
#you will need to adjust the annotate line individually, as I took the easy way out when coding this instead of making it work with anything
ric #print the plot
#make a box plot with region on the x-axis, and shannon diversity on the y-axis, saved in a variable so that it can be saved later with ggsave
shandiv <- alpha_coral %>% ggplot(aes(Region,shannon1)) +
geom_boxplot() +
#ggtitle("Shannon Diversity") +
xlab("")+
ylab("Shannon Diversity") +
theme(text = element_text(size=12)) +
theme(axis.text.x = element_text(angle = 90))+
annotate(geom="text",x=c(1,2,3),y=c(0.75,0.75,0.75),label=shan.letters[order(names(shan.letters))],color="red")
shandiv #print the plot
#make a box plot with region on the x-axis, and species richness on the y-axis, saved in a variable so that it can be saved later with ggsave
invsimp <- alpha_coral %>% ggplot(aes(Region, invsimp1)) +
geom_boxplot() +
ylab("Inverse Simpson Diversity") +
xlab("") +
theme(text = element_text(size=12)) +
theme(axis.text.x = element_text(angle = 90))+
annotate(geom="text",x=c(1,2,3),y=c(1.7,1.7,1.7),label=simp.letters[order(names(simp.letters))],color="red")
invsimp #print the plot
ric + shandiv + invsimp
alpha_coral$Region<-as.factor(alpha_coral$Region) #make sure region is a factor
kruskal.test(rich1~Region,data=alpha_coral) #run a kruskal wallis test of richness by region
#set it up just like we set up the multiple permanova test
sampledf<-data.frame(sample_data(ps))
sampledf$Region<-as.factor(sampledf$Region)
region.list<-levels(sampledf$Region)
region.list
pvals<-c()
locations<-c()
str(kwt)
pvals<-c()
locations<-c()
for (i in 1:length(region.list)){
region.leftout<-region.list[i]
alph_sub<-subset(alpha_coral,Region!=region.leftout) #subset the alpha metrics to just two locations
kwt<-kruskal.test(rich1~Region,alph_sub) #kruskal wallis test
print(kwt)
pvals<-c(pvals,kwt$'p.value') #save the pval
locations<-rbind(locations,c(region.list[-i]))#save the locations tested
}
combinedtest<-cbind(locations,pvals)
combinedtest<-cbind(locations,pvals)
mult_kwt<-data.frame(combinedtest)
mult_kwt$pvaladj<-p.adjust(mult_kwt$pvals,method="bonferroni")
mult_kwt
library("ggplot2")
library("phyloseq")
library("RColorBrewer")
library("reshape2")
library("nlme")
library("dplyr")
library("compositions")
library("tidyverse")
ps <- readRDS("examplePhyloseq.rds") #import the .rds phyloseq object made in the intro to phyloseq notebook
ps #confirm it worked
tax.clean<-data.frame(tax_table(ps))
### Ok, so some ASVs don't have classification at all levels, we can use the following for loop to add some info
for (i in 1:nrow(tax.clean)){ #this loop adds TaxonomicRank_LowestClassification to blanks
if (tax.clean[i,2] == ""){
kingdom <- paste("Kingdom_", tax.clean[i,1], sep = "")
tax.clean[i, 2:7] <- kingdom
} else if (tax.clean[i,3] == ""){
phylum <- paste("Phylum_", tax.clean[i,2], sep = "")
tax.clean[i, 3:7] <- phylum
} else if (tax.clean[i,4] == ""){
class <- paste("Class_", tax.clean[i,3], sep = "")
tax.clean[i, 4:7] <- class
} else if (tax.clean[i,5] == ""){
order <- paste("Order_", tax.clean[i,4], sep = "")
tax.clean[i, 5:7] <- order
} else if (tax.clean[i,6] == ""){
family <- paste("Family_", tax.clean[i,5], sep = "")
tax.clean[i, 6:7] <- family
} else if (tax.clean[i,7] == ""){
tax.clean$Species[i] <- paste("Genus",tax.clean$Genus[i], sep = "_")
}
}
head(tax.clean)
taxonomy2<-as.matrix(tax.clean)
# add taxonomy to ps
tax_table(ps)<-taxonomy2
#merge taxa on the class level, so that there's only 1 value for each Class CHANGE HERE IF YOU WANT A DIFFERENT TAXONOMIC LEVEL
physeq.f.glom <- tax_glom(ps, "Class",NArm=FALSE)
#transform data from raw abundance to relative abundance
physeq.f.ra.glom <- transform_sample_counts(physeq.f.glom, function(x) x*100/sum(x))
#make otu table a dataframe
propData <- as.data.frame((otu_table(physeq.f.ra.glom)))
head(propData)
#set up your dataframe that will be used to make the relative abundance plot
plotDF1 <- propData %>% #within the propData variable
rownames_to_column(var="taxa") %>% #set the rownames (sample IDS) to a column
melt() %>% #takes the data from wide to long format
magrittr::set_names(c("sample", "taxa", "relab")) #rename columns
head(plotDF1)#inspect to make sure it worked
#extract the taxonomy info into something that can be combined with the plot dataframe
taxonomy.2 <- tax_table(physeq.f.ra.glom) %>%
as.data.frame() %>%
rownames_to_column(var="taxa") #add the rownames to a column called taxa
head(taxonomy.2)#just checking it worked
#combine dataframes merging by taxa, with the columns listed in select. ALSO CHANGE CLASS HERE IF YOU WANT A DIFFERENT TAXONOMIC RANK
plotDF1 <- left_join(plotDF1, taxonomy.2, by="taxa") %>% select(taxa, sample, relab, Class)
head(plotDF1)#just checking it worked
sampdata<-data.frame(sample_data(physeq.f.ra.glom)) #make dataframe of the sample data
metadata.2 <- sampdata %>%
rownames_to_column(var="sample") #make a column of rownames (sample)
head(metadata.2)
#combine plotDF1 and metadata.2 by sample name
plotDF1 <- left_join(plotDF1, metadata.2, by="sample")
head(plotDF1) #just checking it worked
#check class of things that should be factors.
plotDF1$sample<-factor(plotDF1$sample)
plotDF1$Site<-factor(plotDF1$Region)
#ASVs were first glommed and then counts were transformed into relative abundaces. ITS2 types that made up less than 5% of a sample's relative abundance were grouped into a <5% category to simplify the visualization in Figure 7.
#get rid of those <5%
plotDF1[plotDF1$relab <1, ]$Class<-"<1% abundance"
head(plotDF1)
plotDF1$Class<-factor(plotDF1$Class)
#check how many classes there are to determine how many colors you need
length(levels(factor(plotDF1$Class)))
#make a list of colors the same length as the number of classes
mycolors <- c("grey","red","orange","yellow","green","blue","magenta","darkorchid4")
mycolors
#set the colors to an associated taxonomic rank. ALSO CHANGE CLASS HERE IF YOU WANT A DIFFERENT TAXONOMIC RANK
names(mycolors)<-levels(factor(plotDF1$Class))
mycolors #confirm it worked
#make a plot with genotype/sample name on the x-axis, relative abundance on the y-axis, and color filled by Class. ALSO CHANGE CLASS HERE IF YOU WANT A DIFFERENT TAXONOMIC RANK
ggplot(plotDF1, aes(x=plotDF1$sample, relab, fill=Class)) +
#make it a barplot with classes stacked on top of each other
geom_bar(stat="identity", position = "stack") +
#set x-axis labels to be oriented vertically, and set the size of the text to 6.5
theme(axis.text.x = element_text(angle = 90,size = 6.5)) +
#set the colors being filled in by class to the mycolors variable made earlier
scale_fill_manual(values = mycolors,limits = levels(plotDF1$Class)) +
#facet wrap (separate out) by Region
facet_grid(~Region,space="free_x",scales="free_x",drop=TRUE) +
#set legend title size to 8 and legend text size to 6
theme(legend.title = element_text(size = 8),legend.text = element_text(size = 6),legend.position = "bottom")+
xlab("")+
ylab("% Relative Abundance")
#switch to relative abundance from raw abundance
physeq.f.ra <- transform_sample_counts(ps, function(x) x*100/sum(x))
#merge by region
p<-merge_samples(physeq.f.ra,"Region")
head(otu_table(p))
head(data.frame(otu_table(p)))
o<-otu_table(p) #make variable of p's otu table
rowSums(otu_table(physeq.f.ra)) #confirm that all of the rows add up to 100 (this makes sure that the data is actually in relative abundance format)
propData <- as.data.frame(o) #make otu table a dataframe
t<-data.frame(cbind(levels(as.factor(sample_data(ps)$Region)))) #make dataframe with region
t <-cbind(t,propData$ASV_2,propData$ASV_3,propData$ASV_4) #add the abundance data of the 3 ASVs from the simper to the dataframe
colnames(t)<-c("Region","ASV_2","ASV_3","ASV_4") #set the column names
pcm <- melt(t, id = c("Region")) #convert data frame from a "wide" format to a "long" format
#make plot with Region as the x-axis, the significant ASVs as the y-axis, and color filled by the significant ASVs
ggplot(pcm, aes(x = Region, y = variable,fill=variable)) +
#make bubble plot format where the size of the bubble is the relative abundance
geom_point(aes(size = as.numeric(value)), alpha = 0.75, shape = 21) +
#set bubble size scaling
scale_size_continuous(limits = c(0.000001, 100), range = c(.5,10), breaks = c(1,25,50,75)) +
#set labels for size legend and color legend
labs( x= "", y = "", size = "Abundance", fill = "Significant ASVs")  +
#set various text sizes and colors, as well as legend position
theme(legend.key=element_blank(), axis.text.x = element_text(colour = "black", size = 12, face = "bold", angle = 90, vjust = 0.3, hjust = 1), axis.text.y = element_text(colour = "black", face = "bold", size = 11), legend.text = element_text(size = 10, face ="bold", colour ="black"), legend.title = element_text(size = 12, face = "bold"), panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1.2), legend.position = "right") +
#set y-scale limits to significant ASVs
scale_y_discrete(limits = rev(levels(pcm$variable)))
taxdf<-data.frame(tax_table(physeq.f.ra))
taxdf<-data.frame(tax_table(physeq.f.ra))
asvnames<-taxdf[rownames(taxdf) %in% c("ASV_2","ASV_3","ASV_4"), ]$Species
asvnames
ggplot(pcm, aes(x = Region, y = variable,fill=variable)) +
#make bubble plot format where the size of the bubble is the relative abundance
geom_point(aes(size = as.numeric(value)), alpha = 0.75, shape = 21) +
#set bubble size scaling
scale_size_continuous(limits = c(0.000001, 100), range = c(.5,10), breaks = c(1,25,50,75)) +
#set labels for size legend and color legend
labs( x= "", y = "", size = "Abundance", fill = "Significant ASVs")  +
#set various text sizes and colors, as well as legend position
theme(legend.key=element_blank(), axis.text.x = element_text(colour = "black", size = 12, face = "bold", angle = 90, vjust = 0.3, hjust = 1), axis.text.y = element_text(colour = "black", face = "bold", size = 11), legend.text = element_text(size = 10, face ="bold", colour ="black"), legend.title = element_text(size = 12, face = "bold"), panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1.2), legend.position = "right") +
#set y-scale limits to significant ASVs
scale_y_discrete(limits = rev(levels(pcm$variable)),labels=asvnames) #add labels here
