library(nlme)
library(dplyr)
library(ggplot2)
library(compositions)
library(phyloseq)
library(vegan)
library(tidyverse)
#needed to run ANCOM
source("ANCOM_funcs.R")
#needed to run ANCOM
source("ANCOM_funcs.R")
ps<-readRDS("examplePhyloseq.rds")
ps
summary(sample_data(ps))
dim(otu_table(ps)) #check your rows and columns
#[1]   64 1195; here samples are rows, so we need to transform it
otu.df<-t(data.frame(otu_table(ps)))
dim(otu.df)
dim(otu_table(ps)) #check your rows and columns
ps
meta_data<-data.frame(sample_data(ps))
#set up for pre-processing function
group_var = NULL
out_cut = 0.05
zero_cut = 0.90
lib_cut = 1000
neg_lb = FALSE
prepro<-feature_table_pre_process(otu.df,meta_data,sample_var="Sample.ID",group_var, out_cut, zero_cut, lib_cut, neg_1b)
prepro
feature_table <- prepro$feature_table # Preprocessed feature table
meta_data <- prepro$meta_data # Preprocessed metadata
struc_zero <- prepro$structure_zeros # Structural zero info
main_var = "Region"
p_adj_method = "BH"
alpha = 0.05
adj_formula = NULL
rand_formula = NULL
t_start = Sys.time()
res = ANCOM(feature_table, meta_data, struc_zero, main_var, p_adj_method, alpha, adj_formula, rand_formula)
t_end = Sys.time()
t_run = t_end - t_start
t_run
dif.abund.tax<-res$out[res$out$W>=10,]
dif.abund.tax
res$out
dif.abund.tax<-res$out[res$out$W>=10,]
dif.abund.tax
dif.abund.tax<-res$out[res$out$W>=10,]
dif.abund.tax
dif.abund.tax<-res$out[res$out$detected_0.7==TRUE,]
dif.abund.tax
cbind(dif.abund.tax$W,data.frame(tax_table(ps)[c(2,8,30)]))
res
dif.abund.tax<-res$out[res$out$detected_0.7==TRUE,]
dif.abund.tax
cbind(dif.abund.tax$W,data.frame(tax_table(ps)[c(2,8,30)]))
ps_difabund<-subset_taxa(ps, rownames(tax_table(ps)) %in% dif.abund.tax$taxa_id)
ps_difabund
df<-(data.frame(otu_table(ps)))
sampledf<-data.frame(sample_data(ps))
simp<-simper(df,sampledf$Region)
str(simp)
summary(simp,ordered=TRUE)
kruskal.test(df$ASV_1~sampledf$Region)
kruskal.test(df$ASV_2~sampledf$Region)
anosim(df,sampledf$Region)
library(corncob)
help(package = "corncob", help_type = "html")
utils::browseVignettes(package = "corncob")
corn<-bbdml(formula=ASV_1~1, #model to be fitted to the abundance
phi.formula = ~1, #model to be fitted to the dispersion
data=ps_noout) #phyloseq obeject
corn<-bbdml(formula=ASV_1~1, #model to be fitted to the abundance
phi.formula = ~1, #model to be fitted to the dispersion
data=ps) #phyloseq obeject
plot(corn, #model output
b=50, #number of bootstrap simulations to be used to approximate the prediction intervals, rec. 1000
total=TRUE, #makes plot on the counts scale with 95% prediction intervals, default is relative abundance
color="Region") #color the points by region of sample
corn<-bbdml(formula=ASV_1~1, #model to be fitted to the abundance
phi.formula = ~1, #model to be fitted to the dispersion
data=ps) #phyloseq obeject
plot(corn, #model output
b=50, #number of bootstrap simulations to be used to approximate the prediction intervals, rec. 1000
total=FALSE, #makes plot on the counts scale with 95% prediction intervals, default is relative abundance
color="Region") #color the points by region of sample
corn<-bbdml(formula=ASV_10~1, #model to be fitted to the abundance
phi.formula = ~1, #model to be fitted to the dispersion
data=ps) #phyloseq obeject
plot(corn, #model output
b=50, #number of bootstrap simulations to be used to approximate the prediction intervals, rec. 1000
total=FALSE, #makes plot on the counts scale with 95% prediction intervals, default is relative abundance
color="Region") #color the points by region of sample
corn<-bbdml(formula=ASV_3~1, #model to be fitted to the abundance
phi.formula = ~1, #model to be fitted to the dispersion
data=ps) #phyloseq obeject
plot(corn, #model output
b=50, #number of bootstrap simulations to be used to approximate the prediction intervals, rec. 1000
total=FALSE, #makes plot on the counts scale with 95% prediction intervals, default is relative abundance
color="Region") #color the points by region of sample
corn<-bbdml(formula=ASV_2~1, #model to be fitted to the abundance
phi.formula = ~1, #model to be fitted to the dispersion
data=ps) #phyloseq obeject
plot(corn, #model output
b=50, #number of bootstrap simulations to be used to approximate the prediction intervals, rec. 1000
total=FALSE, #makes plot on the counts scale with 95% prediction intervals, default is relative abundance
color="Region") #color the points by region of sample
corn<-bbdml(formula=ASV_1~1, #model to be fitted to the abundance
phi.formula = ~1, #model to be fitted to the dispersion
data=ps) #phyloseq obeject
plot(corn, #model output
b=50, #number of bootstrap simulations to be used to approximate the prediction intervals, rec. 1000
total=FALSE, #makes plot on the counts scale with 95% prediction intervals, default is relative abundance
color="Region") #color the points by region of sample
corn<-bbdml(formula=ASV_2~1, #model to be fitted to the abundance
phi.formula = ~1, #model to be fitted to the dispersion
data=ps) #phyloseq obeject
plot(corn, #model output
b=50, #number of bootstrap simulations to be used to approximate the prediction intervals, rec. 1000
total=TRUE, #makes plot on the counts scale with 95% prediction intervals, default is relative abundance
color="Region") #color the points by region of sample
corn<-bbdml(formula=ASV_2~1, #model to be fitted to the abundance
phi.formula = ~1, #model to be fitted to the dispersion
data=ps) #phyloseq obeject
plot(corn, #model output
b=50, #number of bootstrap simulations to be used to approximate the prediction intervals, rec. 1000
total=FALSE, #makes plot on the counts scale with 95% prediction intervals, default is relative abundance
color="Region") #color the points by region of sample
corn_da<-bbdml(formula=ASV_2~Region, #now lets look at ASV_2 as it covaries with region
phi.formula = ~Region, #model to be fitted to the dispersion
data=ps_noout) #phyloseq obeject
corn_da<-bbdml(formula=ASV_2~Region, #now lets look at ASV_2 as it covaries with region
phi.formula = ~Region, #model to be fitted to the dispersion
data=ps) #phyloseq obeject
plot(corn_da, #model output
b=50, #number of bootstrap simulations to be used to approximate the prediction intervals, rec. 1000
#total=TRUE, #makes plot on the counts scale with 95% prediction intervals, default is relative abundance
color="Region") #color the points by region of sample
summary(corn_da)
set.seed(1)
da_analysis<-differentialTest(formula = ~Region,
phi.formula = ~Region,
formula_null = ~1,
phi.formula_null = ~1,
test="Wald",
boot=FALSE,
data=ps_noout,
fdr_cutoff = 0.05)
set.seed(1)
da_analysis<-differentialTest(formula = ~Region,
phi.formula = ~Region,
formula_null = ~1,
phi.formula_null = ~1,
test="Wald",
boot=FALSE,
data=ps,
fdr_cutoff = 0.05)
da_analysis
da_analysis$significant_taxa
plot(da_analysis,level="Genus")
set.seed(1)
ps_noout_ul<-subset_samples(ps,Region!="Middle Keys")
ps_noout_um<-subset_samples(ps,Region!="Lower Keys")
ps_noout_ml<-subset_samples(ps,Region!="Upper Keys")
da_analysis_ul<-differentialTest(formula = ~Region,
phi.formula = ~Region,
formula_null = ~1,
phi.formula_null = ~1,
test="Wald",
boot=FALSE,
data=ps_noout_ul,
fdr_cutoff = 0.05)
da_analysis_um<-differentialTest(formula = ~Region,
phi.formula = ~Region,
formula_null = ~1,
phi.formula_null = ~1,
test="Wald",
boot=FALSE,
data=ps_noout_um,
fdr_cutoff = 0.05)
da_analysis_ml<-differentialTest(formula = ~Region,
phi.formula = ~Region,
formula_null = ~1,
phi.formula_null = ~1,
test="Wald",
boot=FALSE,
data=ps_noout_ml,
fdr_cutoff = 0.05)
p_ul<-plot(da_analysis_ul,level="Genus")
p_um<-plot(da_analysis_um,level="Genus")
plot(da_analysis_ul,level="Genus")
plot(da_analysis_um,level="Genus")
da_analysis_um
da_analysis_um<-differentialTest(formula = ~Region,
phi.formula = ~Region,
formula_null = ~1,
phi.formula_null = ~1,
test="Wald",
boot=FALSE,
data=ps_noout_um,
fdr_cutoff = 0.05)
da_analysis_um
da_analysis_ul
da_analysis_um$significant_taxa
p_ml<-plot(da_analysis_ml,level="Genus")
p_ul|/p_ml
library(patchwork)
p_ul|p_ml
ps_noout_um
p_ul/p_ml
da_analysis_um$significant_taxa
p_ul<-plot(da_analysis_ul,level="Genus")
#p_um<-plot(da_analysis_um,level="Genus") #no sig taxa
p_ml<-plot(da_analysis_ml,level="Genus")
p_ul/p_ml
#da_analysis_um$significant_taxa
p_ul<-plot(da_analysis_ul,level="Genus")
#p_um<-plot(da_analysis_um,level="Genus") #no sig taxa
p_ml<-plot(da_analysis_ml,level="Genus")
p_ul/p_ml
da_analysis_ul$significant_taxa
da_analysis_um$significant_taxa
da_analysis_ml$significant_taxa
p_um$data
p_ul$data
otu_to_taxonomy(da_analysis$significant_taxa,data=ps)
